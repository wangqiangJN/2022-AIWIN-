{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "e01d10da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import gc\n",
    "import lightgbm as lgb\n",
    "import xgboost as xgb\n",
    "import catboost as cab\n",
    "from catboost import CatBoostRegressor\n",
    "from sklearn.linear_model import SGDRegressor, LinearRegression, Ridge\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler, minmax_scale,OneHotEncoder\n",
    "from gensim.models import Word2Vec\n",
    "import math\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "from sklearn.model_selection import StratifiedKFold, KFold\n",
    "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, log_loss\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import toad\n",
    "pd.set_option('display.max_columns',None)\n",
    "pd.set_option('display.max_rows',None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "168431e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# iv_info=toad.quality(data,'default_score',iv_only=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "abc50571",
   "metadata": {},
   "outputs": [],
   "source": [
    "news_list = []\n",
    "for idx, line in enumerate(open('/home/c506plus/wq/AIWIN/国泰/2022S-T3-1st-Training/ent_news.csv', encoding='utf-8')):\n",
    "    if idx == 0:\n",
    "        cols = line.split('|')\n",
    "    else:\n",
    "        line_list = line.split('|')\n",
    "        line_list = line_list[:8] + [''.join(line_list[8:]).replace('\\n','')]\n",
    "        news_list.append(line_list)\n",
    "news_df = pd.DataFrame(news_list, columns=cols)\n",
    "\n",
    "ent_default = pd.read_csv('/home/c506plus/wq/AIWIN/国泰/2022S-T3-1st-Training/ent_default.csv', sep='|')\n",
    "ent_fina = pd.read_csv('/home/c506plus/wq/AIWIN/国泰/2022S-T3-1st-Training/ent_financial_indicator.csv', sep='|')\n",
    "ent_info = pd.read_csv('/home/c506plus/wq/AIWIN/国泰/2022S-T3-1st-Training/ent_info.csv', sep='|')\n",
    "answer = pd.read_csv('/home/c506plus/wq/AIWIN/国泰/sample_submission/answer.csv', sep='|')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "19e903b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "### 时间处理\n",
    "ent_default['year'] = ent_default['acu_date'].apply(lambda x:x//10000)\n",
    "ent_fina['year'] = ent_fina['report_period'].apply(lambda x:x//10000)\n",
    "news_df['year'] = news_df['publishdate'].apply(lambda x:int(x)//10000)\n",
    "#这里造个object特征减掉一年\n",
    "ent_default['ent_id_year'] = ent_default['ent_id'] + '_' + (ent_default['year'] - 1).astype(str)\n",
    "ent_fina['ent_id_year'] = ent_fina['ent_id'] + '_' + ent_fina['year'].astype(str)\n",
    "news_df['ent_id_year'] = news_df['ent_id'] + '_' + news_df['year'].astype(str)\n",
    "answer['ent_id_year'] = answer['ent_id'].apply(lambda x: x+'_2020')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "0ed8f3a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "del ent_fina['year'], news_df['year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "ea60847f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 去重\n",
    "ent_default_new = ent_default.drop_duplicates(subset=['ent_id_year'], keep='last')\n",
    "ent_default_new['default_score'] = 1\n",
    "answer['year'] = 2021\n",
    "data = pd.concat([ent_default_new[['ent_id','ent_id_year','year','default_score']], answer], axis=0, ignore_index=True)\n",
    "del ent_default_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "7bba5b16",
   "metadata": {},
   "outputs": [],
   "source": [
    "ent_ids = [i for i in answer['ent_id'].unique() if i not in ent_default[ent_default['year']==2019]['ent_id'].unique().tolist()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "1eb0e9ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "ent_ids_df = pd.DataFrame({'ent_id':ent_ids})\n",
    "ent_ids_df['year'] = 2019\n",
    "ent_ids_df['default_score'] = 0\n",
    "ent_ids_df['ent_id_year'] = ent_ids_df['ent_id'].apply(lambda x: x+'_2018')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "9ddfc948",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([data, ent_ids_df], axis=0, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "7fb7ec20",
   "metadata": {},
   "outputs": [],
   "source": [
    "ent_ids = [i for i in answer['ent_id'].unique() if i not in ent_default[ent_default['year']==2020]['ent_id'].unique().tolist()]\n",
    "ent_ids_df = pd.DataFrame({'ent_id':ent_ids})\n",
    "ent_ids_df['year'] = 2020\n",
    "ent_ids_df['default_score'] = 0\n",
    "ent_ids_df['ent_id_year'] = ent_ids_df['ent_id'].apply(lambda x: x+'_2019')\n",
    "data = pd.concat([data, ent_ids_df], axis=0, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "0da3e5e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(26926, 4)\n",
      "(26926, 17)\n",
      "(26926, 180)\n"
     ]
    }
   ],
   "source": [
    "# 合并ent_info、ent_fina\n",
    "print(data.shape)\n",
    "ent_info_new = ent_info.drop_duplicates()\n",
    "data = data.merge(ent_info_new, on=['ent_id'], how='left')\n",
    "\n",
    "print(data.shape)\n",
    "\n",
    "ent_fina_new = ent_fina.sort_values('report_period').drop_duplicates(subset=['ent_id_year'], keep='last')\n",
    "data = data.merge(ent_fina_new, on=['ent_id','ent_id_year'], how='left')\n",
    "print(data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "eb85c173",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ent_id</th>\n",
       "      <th>ent_id_year</th>\n",
       "      <th>year</th>\n",
       "      <th>default_score</th>\n",
       "      <th>industryphy</th>\n",
       "      <th>industryco</th>\n",
       "      <th>opfrom</th>\n",
       "      <th>opto</th>\n",
       "      <th>esdate</th>\n",
       "      <th>apprdate</th>\n",
       "      <th>...</th>\n",
       "      <th>s_qfa_yoysales</th>\n",
       "      <th>s_qfa_cgrsales</th>\n",
       "      <th>s_qfa_yoyop</th>\n",
       "      <th>s_qfa_cgrop</th>\n",
       "      <th>s_qfa_yoyprofit</th>\n",
       "      <th>s_qfa_cgrprofit</th>\n",
       "      <th>s_qfa_yoynetprofit</th>\n",
       "      <th>s_qfa_cgrnetprofit</th>\n",
       "      <th>s_fa_yoy_equity</th>\n",
       "      <th>rd_expense</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306</td>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>房地产业</td>\n",
       "      <td>其他房地产业</td>\n",
       "      <td>2010-05-11</td>\n",
       "      <td>2030-05-10</td>\n",
       "      <td>2010-05-11</td>\n",
       "      <td>2014-12-12</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>-55.7344</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>q005d1b175fed3b08e45aa7a402ac0072</td>\n",
       "      <td>q005d1b175fed3b08e45aa7a402ac0072_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>租赁和商务服务业</td>\n",
       "      <td>商务服务业</td>\n",
       "      <td>1998-08-25</td>\n",
       "      <td>2048-08-25</td>\n",
       "      <td>1998-08-25</td>\n",
       "      <td>2022-03-09</td>\n",
       "      <td>...</td>\n",
       "      <td>9.3287</td>\n",
       "      <td>18.1813</td>\n",
       "      <td>-376.4088</td>\n",
       "      <td>-284.9769</td>\n",
       "      <td>-331.8106</td>\n",
       "      <td>-367.2886</td>\n",
       "      <td>3.3798</td>\n",
       "      <td>-245.5373</td>\n",
       "      <td>-40.8727</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>q01e01a62678f34dacfaa178d8866b7b0</td>\n",
       "      <td>q01e01a62678f34dacfaa178d8866b7b0_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>批发和零售业</td>\n",
       "      <td>其他家庭用品批发</td>\n",
       "      <td>1993-06-14</td>\n",
       "      <td>9999-12-31</td>\n",
       "      <td>1993-06-14</td>\n",
       "      <td>2018-01-26</td>\n",
       "      <td>...</td>\n",
       "      <td>-131.9653</td>\n",
       "      <td>-159.1634</td>\n",
       "      <td>-5217.9072</td>\n",
       "      <td>-15728.1518</td>\n",
       "      <td>-7450.4862</td>\n",
       "      <td>-21439.8637</td>\n",
       "      <td>-7336.9729</td>\n",
       "      <td>-21436.0190</td>\n",
       "      <td>-136.3506</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>q0485d846345eabfa7e3fa4455c9e7a70</td>\n",
       "      <td>q0485d846345eabfa7e3fa4455c9e7a70_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>制造业</td>\n",
       "      <td>化学药品原料药制造</td>\n",
       "      <td>1993-08-14</td>\n",
       "      <td>9999-12-31</td>\n",
       "      <td>1993-08-14</td>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>q04c0c103124d53d281131049f323b302</td>\n",
       "      <td>q04c0c103124d53d281131049f323b302_2019</td>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "      <td>农、林、牧、渔业</td>\n",
       "      <td>其他农业</td>\n",
       "      <td>1999-04-28</td>\n",
       "      <td>2026-08-24</td>\n",
       "      <td>1999-04-28</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>...</td>\n",
       "      <td>-23.1288</td>\n",
       "      <td>75.6115</td>\n",
       "      <td>-969.3446</td>\n",
       "      <td>-1051.3499</td>\n",
       "      <td>-1145.8558</td>\n",
       "      <td>-1196.9734</td>\n",
       "      <td>-717.5617</td>\n",
       "      <td>-1068.8059</td>\n",
       "      <td>2837.6078</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 180 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ent_id                             ent_id_year  \\\n",
       "0  q00350f4fa8694d82639aec1653cf0306  q00350f4fa8694d82639aec1653cf0306_2018   \n",
       "1  q005d1b175fed3b08e45aa7a402ac0072  q005d1b175fed3b08e45aa7a402ac0072_2018   \n",
       "2  q01e01a62678f34dacfaa178d8866b7b0  q01e01a62678f34dacfaa178d8866b7b0_2018   \n",
       "3  q0485d846345eabfa7e3fa4455c9e7a70  q0485d846345eabfa7e3fa4455c9e7a70_2018   \n",
       "4  q04c0c103124d53d281131049f323b302  q04c0c103124d53d281131049f323b302_2019   \n",
       "\n",
       "   year  default_score industryphy industryco      opfrom        opto  \\\n",
       "0  2019              1        房地产业     其他房地产业  2010-05-11  2030-05-10   \n",
       "1  2019              1    租赁和商务服务业      商务服务业  1998-08-25  2048-08-25   \n",
       "2  2019              1      批发和零售业   其他家庭用品批发  1993-06-14  9999-12-31   \n",
       "3  2019              1         制造业  化学药品原料药制造  1993-08-14  9999-12-31   \n",
       "4  2020              1    农、林、牧、渔业       其他农业  1999-04-28  2026-08-24   \n",
       "\n",
       "       esdate    apprdate  ...  s_qfa_yoysales s_qfa_cgrsales s_qfa_yoyop  \\\n",
       "0  2010-05-11  2014-12-12  ...          0.0000         0.0000      0.0000   \n",
       "1  1998-08-25  2022-03-09  ...          9.3287        18.1813   -376.4088   \n",
       "2  1993-06-14  2018-01-26  ...       -131.9653      -159.1634  -5217.9072   \n",
       "3  1993-08-14  2018-09-20  ...             NaN            NaN         NaN   \n",
       "4  1999-04-28  2021-12-31  ...        -23.1288        75.6115   -969.3446   \n",
       "\n",
       "  s_qfa_cgrop s_qfa_yoyprofit s_qfa_cgrprofit s_qfa_yoynetprofit  \\\n",
       "0      0.0000          0.0000          0.0000             0.0000   \n",
       "1   -284.9769       -331.8106       -367.2886             3.3798   \n",
       "2 -15728.1518      -7450.4862     -21439.8637         -7336.9729   \n",
       "3         NaN             NaN             NaN                NaN   \n",
       "4  -1051.3499      -1145.8558      -1196.9734          -717.5617   \n",
       "\n",
       "   s_qfa_cgrnetprofit  s_fa_yoy_equity  rd_expense  \n",
       "0              0.0000         -55.7344         0.0  \n",
       "1           -245.5373         -40.8727         0.0  \n",
       "2         -21436.0190        -136.3506         0.0  \n",
       "3                 NaN              NaN         NaN  \n",
       "4          -1068.8059        2837.6078         0.0  \n",
       "\n",
       "[5 rows x 180 columns]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "8bbe78f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eda(data):\n",
    "    print(\"前5行数据:\")\n",
    "    print(data.head())\n",
    "    print(\"数据大小:\")\n",
    "    print(data.shape)\n",
    "    print(\"数据信息:\")\n",
    "    print(data.info())\n",
    "    print(\"数据唯一值:\")\n",
    "    print(data.nunique())\n",
    "    print(\"缺失值:\")\n",
    "    print(data.isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "1c93da37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ent_id</th>\n",
       "      <th>ent_id_year</th>\n",
       "      <th>year</th>\n",
       "      <th>default_score</th>\n",
       "      <th>industryphy</th>\n",
       "      <th>industryco</th>\n",
       "      <th>opfrom</th>\n",
       "      <th>opto</th>\n",
       "      <th>esdate</th>\n",
       "      <th>apprdate</th>\n",
       "      <th>...</th>\n",
       "      <th>s_qfa_yoysales</th>\n",
       "      <th>s_qfa_cgrsales</th>\n",
       "      <th>s_qfa_yoyop</th>\n",
       "      <th>s_qfa_cgrop</th>\n",
       "      <th>s_qfa_yoyprofit</th>\n",
       "      <th>s_qfa_cgrprofit</th>\n",
       "      <th>s_qfa_yoynetprofit</th>\n",
       "      <th>s_qfa_cgrnetprofit</th>\n",
       "      <th>s_fa_yoy_equity</th>\n",
       "      <th>rd_expense</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306</td>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>房地产业</td>\n",
       "      <td>其他房地产业</td>\n",
       "      <td>2010-05-11</td>\n",
       "      <td>2030-05-10</td>\n",
       "      <td>2010-05-11</td>\n",
       "      <td>2014-12-12</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>-55.7344</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>q005d1b175fed3b08e45aa7a402ac0072</td>\n",
       "      <td>q005d1b175fed3b08e45aa7a402ac0072_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>租赁和商务服务业</td>\n",
       "      <td>商务服务业</td>\n",
       "      <td>1998-08-25</td>\n",
       "      <td>2048-08-25</td>\n",
       "      <td>1998-08-25</td>\n",
       "      <td>2022-03-09</td>\n",
       "      <td>...</td>\n",
       "      <td>9.3287</td>\n",
       "      <td>18.1813</td>\n",
       "      <td>-376.4088</td>\n",
       "      <td>-284.9769</td>\n",
       "      <td>-331.8106</td>\n",
       "      <td>-367.2886</td>\n",
       "      <td>3.3798</td>\n",
       "      <td>-245.5373</td>\n",
       "      <td>-40.8727</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>q01e01a62678f34dacfaa178d8866b7b0</td>\n",
       "      <td>q01e01a62678f34dacfaa178d8866b7b0_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>批发和零售业</td>\n",
       "      <td>其他家庭用品批发</td>\n",
       "      <td>1993-06-14</td>\n",
       "      <td>9999-12-31</td>\n",
       "      <td>1993-06-14</td>\n",
       "      <td>2018-01-26</td>\n",
       "      <td>...</td>\n",
       "      <td>-131.9653</td>\n",
       "      <td>-159.1634</td>\n",
       "      <td>-5217.9072</td>\n",
       "      <td>-15728.1518</td>\n",
       "      <td>-7450.4862</td>\n",
       "      <td>-21439.8637</td>\n",
       "      <td>-7336.9729</td>\n",
       "      <td>-21436.0190</td>\n",
       "      <td>-136.3506</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>q0485d846345eabfa7e3fa4455c9e7a70</td>\n",
       "      <td>q0485d846345eabfa7e3fa4455c9e7a70_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>制造业</td>\n",
       "      <td>化学药品原料药制造</td>\n",
       "      <td>1993-08-14</td>\n",
       "      <td>9999-12-31</td>\n",
       "      <td>1993-08-14</td>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>q04c0c103124d53d281131049f323b302</td>\n",
       "      <td>q04c0c103124d53d281131049f323b302_2019</td>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "      <td>农、林、牧、渔业</td>\n",
       "      <td>其他农业</td>\n",
       "      <td>1999-04-28</td>\n",
       "      <td>2026-08-24</td>\n",
       "      <td>1999-04-28</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>...</td>\n",
       "      <td>-23.1288</td>\n",
       "      <td>75.6115</td>\n",
       "      <td>-969.3446</td>\n",
       "      <td>-1051.3499</td>\n",
       "      <td>-1145.8558</td>\n",
       "      <td>-1196.9734</td>\n",
       "      <td>-717.5617</td>\n",
       "      <td>-1068.8059</td>\n",
       "      <td>2837.6078</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 180 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ent_id                             ent_id_year  \\\n",
       "0  q00350f4fa8694d82639aec1653cf0306  q00350f4fa8694d82639aec1653cf0306_2018   \n",
       "1  q005d1b175fed3b08e45aa7a402ac0072  q005d1b175fed3b08e45aa7a402ac0072_2018   \n",
       "2  q01e01a62678f34dacfaa178d8866b7b0  q01e01a62678f34dacfaa178d8866b7b0_2018   \n",
       "3  q0485d846345eabfa7e3fa4455c9e7a70  q0485d846345eabfa7e3fa4455c9e7a70_2018   \n",
       "4  q04c0c103124d53d281131049f323b302  q04c0c103124d53d281131049f323b302_2019   \n",
       "\n",
       "   year  default_score industryphy industryco      opfrom        opto  \\\n",
       "0  2019              1        房地产业     其他房地产业  2010-05-11  2030-05-10   \n",
       "1  2019              1    租赁和商务服务业      商务服务业  1998-08-25  2048-08-25   \n",
       "2  2019              1      批发和零售业   其他家庭用品批发  1993-06-14  9999-12-31   \n",
       "3  2019              1         制造业  化学药品原料药制造  1993-08-14  9999-12-31   \n",
       "4  2020              1    农、林、牧、渔业       其他农业  1999-04-28  2026-08-24   \n",
       "\n",
       "       esdate    apprdate  ...  s_qfa_yoysales s_qfa_cgrsales s_qfa_yoyop  \\\n",
       "0  2010-05-11  2014-12-12  ...          0.0000         0.0000      0.0000   \n",
       "1  1998-08-25  2022-03-09  ...          9.3287        18.1813   -376.4088   \n",
       "2  1993-06-14  2018-01-26  ...       -131.9653      -159.1634  -5217.9072   \n",
       "3  1993-08-14  2018-09-20  ...             NaN            NaN         NaN   \n",
       "4  1999-04-28  2021-12-31  ...        -23.1288        75.6115   -969.3446   \n",
       "\n",
       "  s_qfa_cgrop s_qfa_yoyprofit s_qfa_cgrprofit s_qfa_yoynetprofit  \\\n",
       "0      0.0000          0.0000          0.0000             0.0000   \n",
       "1   -284.9769       -331.8106       -367.2886             3.3798   \n",
       "2 -15728.1518      -7450.4862     -21439.8637         -7336.9729   \n",
       "3         NaN             NaN             NaN                NaN   \n",
       "4  -1051.3499      -1145.8558      -1196.9734          -717.5617   \n",
       "\n",
       "   s_qfa_cgrnetprofit  s_fa_yoy_equity  rd_expense  \n",
       "0              0.0000         -55.7344         0.0  \n",
       "1           -245.5373         -40.8727         0.0  \n",
       "2         -21436.0190        -136.3506         0.0  \n",
       "3                 NaN              NaN         NaN  \n",
       "4          -1068.8059        2837.6078         0.0  \n",
       "\n",
       "[5 rows x 180 columns]"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "af3844b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#缺失值填充\n",
    "data['opfrom_year']=data['opfrom'].fillna('0000').apply(lambda x:int(x[:4]))\n",
    "data['opto_year']=data['opto'].fillna('0000').apply(lambda x:int(x[:4]))\n",
    "data['esdate_year']=data['esdate'].fillna('0000').apply(lambda x:int(x[:4]))\n",
    "data['apprdate_year']=data['apprdate'].fillna('0000').apply(lambda x:int(x[:4]))\n",
    "data.loc[data.opfrom.isnull(),'opfrom']=data.loc[data.opfrom.isnull(),'esdate']\n",
    "data.loc[data.apprdate.isnull(),'apprdate']=data.loc[data.apprdate.isnull(),'esdate']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "2d60187c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#经营期限自、成立日期 经营期限自、标准日期差\n",
    "data['opfrom_esdate_diff']=data['opfrom'].apply(lambda x:int(x[:4]))-data['esdate'].apply(lambda x:int(x[:4]))\n",
    "data['apprdate_esdate_diff']=data['apprdate'].apply(lambda x:int(x[:4]))-data['esdate'].apply(lambda x:int(x[:4]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "23674ef3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#造点时间差特征\n",
    "data['year_opfrom_diff']=data['year']-data['opfrom'].apply(lambda x:int(x[:4]))\n",
    "data['year_esdate_diff']=data['year']-data['esdate'].apply(lambda x:int(x[:4]))\n",
    "data['year_apprdate_diff']=data['year']-data['apprdate'].apply(lambda x:int(x[:4]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "b3aa8e89",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['report_period_year']=data['report_period'].apply(lambda x:x//10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "f60de182",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ent_id</th>\n",
       "      <th>newscode</th>\n",
       "      <th>indextype</th>\n",
       "      <th>index</th>\n",
       "      <th>impscore</th>\n",
       "      <th>publishdate</th>\n",
       "      <th>publishtime</th>\n",
       "      <th>newssource</th>\n",
       "      <th>newstitle\\n</th>\n",
       "      <th>ent_id_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f</td>\n",
       "      <td>20200723020102519526</td>\n",
       "      <td>514</td>\n",
       "      <td>514102</td>\n",
       "      <td>-1</td>\n",
       "      <td>20200723</td>\n",
       "      <td>2020-07-24 07:25:00</td>\n",
       "      <td>新浪财经</td>\n",
       "      <td>年内17位上市银行副行长以上高管离巢 “70后”加速补位</td>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f_2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f</td>\n",
       "      <td>20190116020148443386</td>\n",
       "      <td>514</td>\n",
       "      <td>514102</td>\n",
       "      <td>-1</td>\n",
       "      <td>20190116</td>\n",
       "      <td>2019-01-16 22:20:00</td>\n",
       "      <td>中国经营报</td>\n",
       "      <td>一周内3家银行宣布董事辞职</td>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f_2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f</td>\n",
       "      <td>20181025020125536510</td>\n",
       "      <td>513</td>\n",
       "      <td>513128</td>\n",
       "      <td>0</td>\n",
       "      <td>20181025</td>\n",
       "      <td>2018-10-25 00:07:00</td>\n",
       "      <td>北京商报</td>\n",
       "      <td>10月以来关停59家 社区支行再做减法</td>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f_2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f</td>\n",
       "      <td>20180122020038513443</td>\n",
       "      <td>513</td>\n",
       "      <td>513108</td>\n",
       "      <td>-1</td>\n",
       "      <td>20180122</td>\n",
       "      <td>2018-01-22 16:46:00</td>\n",
       "      <td>光明网</td>\n",
       "      <td>浦发银行虚假授信775亿：竟是零不良</td>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f_2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f</td>\n",
       "      <td>20201102020157068019</td>\n",
       "      <td>514</td>\n",
       "      <td>514103</td>\n",
       "      <td>-1</td>\n",
       "      <td>20201102</td>\n",
       "      <td>2020-11-03 08:03:00</td>\n",
       "      <td>澎湃</td>\n",
       "      <td>浦发银行原副行长穆矢接受纪律审查和监察调查</td>\n",
       "      <td>qeda55cd146b46ea96da5fd4efa70089f_2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ent_id              newscode indextype   index  \\\n",
       "0  qeda55cd146b46ea96da5fd4efa70089f  20200723020102519526       514  514102   \n",
       "1  qeda55cd146b46ea96da5fd4efa70089f  20190116020148443386       514  514102   \n",
       "2  qeda55cd146b46ea96da5fd4efa70089f  20181025020125536510       513  513128   \n",
       "3  qeda55cd146b46ea96da5fd4efa70089f  20180122020038513443       513  513108   \n",
       "4  qeda55cd146b46ea96da5fd4efa70089f  20201102020157068019       514  514103   \n",
       "\n",
       "  impscore publishdate          publishtime newssource  \\\n",
       "0       -1    20200723  2020-07-24 07:25:00       新浪财经   \n",
       "1       -1    20190116  2019-01-16 22:20:00      中国经营报   \n",
       "2        0    20181025  2018-10-25 00:07:00       北京商报   \n",
       "3       -1    20180122  2018-01-22 16:46:00        光明网   \n",
       "4       -1    20201102  2020-11-03 08:03:00         澎湃   \n",
       "\n",
       "                    newstitle\\n                             ent_id_year  \n",
       "0  年内17位上市银行副行长以上高管离巢 “70后”加速补位  qeda55cd146b46ea96da5fd4efa70089f_2020  \n",
       "1                 一周内3家银行宣布董事辞职  qeda55cd146b46ea96da5fd4efa70089f_2019  \n",
       "2           10月以来关停59家 社区支行再做减法  qeda55cd146b46ea96da5fd4efa70089f_2018  \n",
       "3            浦发银行虚假授信775亿：竟是零不良  qeda55cd146b46ea96da5fd4efa70089f_2018  \n",
       "4         浦发银行原副行长穆矢接受纪律审查和监察调查  qeda55cd146b46ea96da5fd4efa70089f_2020  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "d800bfac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ent_id_year</th>\n",
       "      <th>list</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pz02551f7157daa47863bf24165b32e8af_2018</td>\n",
       "      <td>中华网</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>pz02551f7157daa47863bf24165b32e8af_2019</td>\n",
       "      <td>贺州日报 广西新闻网 电力传媒 新浪乐居</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>pz02551f7157daa47863bf24165b32e8af_2020</td>\n",
       "      <td>Ofweek维科网 天津法院网 乐居财经 东南网 北京金融资产交易所 e公司官微 环球时报 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pz17ed364608b1470526dd99102ba3d4d5_2018</td>\n",
       "      <td>今日头条 中国债券信息网 财联社 中证评级 财联社 寻瑕记 私募工厂 债市观察 债市研究 中...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>pz17ed364608b1470526dd99102ba3d4d5_2019</td>\n",
       "      <td>网易 科技日报 信用中国(山东) 工商时报 华夏时报 搜狐财经 中国经营网 今日头条 今日头...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18443</th>\n",
       "      <td>qffed96626add8c8fbbf9726c9c164951_2019</td>\n",
       "      <td>上海交易所 东方网 上海市高级人民法院 新京报网 全国企业破产重整案件信息网 网易 全国企业...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18444</th>\n",
       "      <td>qffed96626add8c8fbbf9726c9c164951_2020</td>\n",
       "      <td>搜狐网 上证e互动 东方网 21财经 中国货币网 新浪财经 阿思达克 上证e互动 财联社 今...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18445</th>\n",
       "      <td>qfff442f30b5f5b496e3e4f387e9cffdd_2018</td>\n",
       "      <td>金融投资报 大众证券网 千龙网 上海证券报 证券时报网 中国经济网 新浪财经 凤凰财经 票友...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18446</th>\n",
       "      <td>qfff442f30b5f5b496e3e4f387e9cffdd_2019</td>\n",
       "      <td>四川省城市商业银行协会 格隆汇 金融行业网 蓝腾财经 南方财富网 麦票圈 新浪微博 中国基金...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18447</th>\n",
       "      <td>qfff442f30b5f5b496e3e4f387e9cffdd_2020</td>\n",
       "      <td>固收产品预警 和讯网 裕道人 票据经纪委员会 不可靠消息 新浪财经 中国经济网 新浪财经 银...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18448 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   ent_id_year  \\\n",
       "0      pz02551f7157daa47863bf24165b32e8af_2018   \n",
       "1      pz02551f7157daa47863bf24165b32e8af_2019   \n",
       "2      pz02551f7157daa47863bf24165b32e8af_2020   \n",
       "3      pz17ed364608b1470526dd99102ba3d4d5_2018   \n",
       "4      pz17ed364608b1470526dd99102ba3d4d5_2019   \n",
       "...                                        ...   \n",
       "18443   qffed96626add8c8fbbf9726c9c164951_2019   \n",
       "18444   qffed96626add8c8fbbf9726c9c164951_2020   \n",
       "18445   qfff442f30b5f5b496e3e4f387e9cffdd_2018   \n",
       "18446   qfff442f30b5f5b496e3e4f387e9cffdd_2019   \n",
       "18447   qfff442f30b5f5b496e3e4f387e9cffdd_2020   \n",
       "\n",
       "                                                    list  \n",
       "0                                                    中华网  \n",
       "1                                   贺州日报 广西新闻网 电力传媒 新浪乐居  \n",
       "2      Ofweek维科网 天津法院网 乐居财经 东南网 北京金融资产交易所 e公司官微 环球时报 ...  \n",
       "3      今日头条 中国债券信息网 财联社 中证评级 财联社 寻瑕记 私募工厂 债市观察 债市研究 中...  \n",
       "4      网易 科技日报 信用中国(山东) 工商时报 华夏时报 搜狐财经 中国经营网 今日头条 今日头...  \n",
       "...                                                  ...  \n",
       "18443  上海交易所 东方网 上海市高级人民法院 新京报网 全国企业破产重整案件信息网 网易 全国企业...  \n",
       "18444  搜狐网 上证e互动 东方网 21财经 中国货币网 新浪财经 阿思达克 上证e互动 财联社 今...  \n",
       "18445  金融投资报 大众证券网 千龙网 上海证券报 证券时报网 中国经济网 新浪财经 凤凰财经 票友...  \n",
       "18446  四川省城市商业银行协会 格隆汇 金融行业网 蓝腾财经 南方财富网 麦票圈 新浪微博 中国基金...  \n",
       "18447  固收产品预警 和讯网 裕道人 票据经纪委员会 不可靠消息 新浪财经 中国经济网 新浪财经 银...  \n",
       "\n",
       "[18448 rows x 2 columns]"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer,TfidfTransformer\n",
    "from sklearn.decomposition import TruncatedSVD,SparsePCA\n",
    "\n",
    "tmp_df=news_df.groupby(['ent_id_year'])['newssource'].agg({list}).reset_index()\n",
    "tmp_df['list']=tmp_df['list'].apply(lambda x:' '.join([i for i in x]))\n",
    "tmp_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "0b704cfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf=TfidfVectorizer()\n",
    "tf=tfidf.fit_transform(tmp_df['list'].fillna(\"##\").values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "73a5abf5",
   "metadata": {},
   "outputs": [],
   "source": [
    "decom=TruncatedSVD(n_components=128,random_state=1024)\n",
    "decom_x=decom.fit_transform(tf)\n",
    "decom_feas=pd.DataFrame(decom_x)\n",
    "decom_feas.columns=['newssource_svd'+str(i) for i in range(decom_feas.shape[1])]\n",
    "decom_feas['ent_id_year']=tmp_df['ent_id_year']\n",
    "data=data.merge(decom_feas,on=['ent_id_year'],how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "4685021d",
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in  ['indextype','index']:\n",
    "    tmp_df=news_df.groupby(['ent_id_year'])[col].agg({list}).reset_index()\n",
    "    tmp_df['list']=tmp_df['list'].apply(lambda x:' '.join([str(i) for i in x]))\n",
    "    \n",
    "    countv=CountVectorizer()\n",
    "    cv=countv.fit_transform(tmp_df['list'].fillna(\"##\").values)\n",
    "    cv_df=pd.DataFrame(cv.toarray())\n",
    "    cv_df.columns=[col+ '_cv_' + str(i) for i in range(cv_df.shape[1])]\n",
    "    cv_df['ent_id_year']=tmp_df['ent_id_year']\n",
    "    data=data.merge(cv_df,on=['ent_id_year'],how='left')\n",
    "    del cv_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "92c0d960",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ent_info.csv(企业的基本信息)\n",
    "ent_info_cat_cols = ['industryphy','industryco','enttype','entstatus','prov','city','county','is_bondissuer'] \n",
    "ent_info_num_cols = ['regcap']\n",
    "ent_info_time_cols = ['opfrom','opto','esdate','apprdate'] # 经营(驻在)期限自、经营(驻在)期限至、成立日期、核准日期\n",
    "\n",
    "# ent_financial_indicator.csv(企业的财务指标数据)\n",
    "ent_fina_num_cols = [f for f in ent_fina.columns if f not in ['ent_id','report_period','ent_id_year']]\n",
    "ent_fina_time_cols = ['report_period'] # 报告期\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "2242f476",
   "metadata": {},
   "outputs": [],
   "source": [
    "# #日期时间处理optfrom opto esdate reegap,opto这一列暂时先将其抛弃掉\n",
    "# for feat in['opfrom','esdate','apprdate']:\n",
    "#     data[feat+'_year']=pd.to_datetime(data[feat]).dt.year\n",
    "#     data[feat+'_month']=pd.to_datetime(data[feat]).dt.month\n",
    "#     data[feat+'_day']=pd.to_datetime(data[feat]).dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "25ba40a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#构建交叉特征\n",
    "data['pro_city_county']=data['prov']+'_'+data['city']+'_'+data['county']\n",
    "data['industryphy_yco']=data['industryphy']+'_'+data['industryco']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "202b129a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#对object特征进行label_encoder处理\n",
    "for feat in ent_info_cat_cols+['pro_city_county','industryphy_yco'] :\n",
    "    lbe = LabelEncoder()\n",
    "    data[feat] = lbe.fit_transform(data[feat])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "53b37814",
   "metadata": {},
   "outputs": [],
   "source": [
    "#对object特征进行frequency_encoder处理\n",
    "for feat in ent_info_cat_cols:\n",
    "    data[feat+'_cnt']=data[feat].map(data[feat].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "621cc899",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ent_id</th>\n",
       "      <th>ent_id_year</th>\n",
       "      <th>year</th>\n",
       "      <th>default_score</th>\n",
       "      <th>industryphy</th>\n",
       "      <th>industryco</th>\n",
       "      <th>opfrom</th>\n",
       "      <th>opto</th>\n",
       "      <th>esdate</th>\n",
       "      <th>apprdate</th>\n",
       "      <th>...</th>\n",
       "      <th>pro_city_county</th>\n",
       "      <th>industryphy_yco</th>\n",
       "      <th>industryphy_cnt</th>\n",
       "      <th>industryco_cnt</th>\n",
       "      <th>enttype_cnt</th>\n",
       "      <th>entstatus_cnt</th>\n",
       "      <th>prov_cnt</th>\n",
       "      <th>city_cnt</th>\n",
       "      <th>county_cnt</th>\n",
       "      <th>is_bondissuer_cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306</td>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>117</td>\n",
       "      <td>2010-05-11</td>\n",
       "      <td>2030-05-10</td>\n",
       "      <td>2010-05-11</td>\n",
       "      <td>2014-12-12</td>\n",
       "      <td>...</td>\n",
       "      <td>294</td>\n",
       "      <td>481</td>\n",
       "      <td>2476</td>\n",
       "      <td>138</td>\n",
       "      <td>1381</td>\n",
       "      <td>26884</td>\n",
       "      <td>1008</td>\n",
       "      <td>246</td>\n",
       "      <td>60</td>\n",
       "      <td>26926</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 451 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ent_id                             ent_id_year  \\\n",
       "0  q00350f4fa8694d82639aec1653cf0306  q00350f4fa8694d82639aec1653cf0306_2018   \n",
       "\n",
       "   year  default_score  industryphy  industryco      opfrom        opto  \\\n",
       "0  2019              1           10         117  2010-05-11  2030-05-10   \n",
       "\n",
       "       esdate    apprdate  ...  pro_city_county  industryphy_yco  \\\n",
       "0  2010-05-11  2014-12-12  ...              294              481   \n",
       "\n",
       "   industryphy_cnt  industryco_cnt  enttype_cnt  entstatus_cnt  prov_cnt  \\\n",
       "0             2476             138         1381          26884      1008   \n",
       "\n",
       "   city_cnt  county_cnt  is_bondissuer_cnt  \n",
       "0       246          60              26926  \n",
       "\n",
       "[1 rows x 451 columns]"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "6165d9c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols=['ent_id','ent_id_year','year','default_score','industryphy','industryco',\n",
    "          'opfrom','opto','esdate','apprdate',\n",
    "          'enttype','entstatus','prov','city','county','is_bondissuer'\n",
    "        ,'report_period','pro_city_county','industryphy_yco']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "9384aa43",
   "metadata": {},
   "outputs": [],
   "source": [
    "#对连续型特征进行缺失值补全和归一化\n",
    "dense_features= [f for f in data.columns if f not in cat_cols]\n",
    "data[dense_features] = data[dense_features].fillna(0, )\n",
    "mms = MinMaxScaler(feature_range=(0, 1))\n",
    "data[dense_features] = mms.fit_transform(data[dense_features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "93ca880a",
   "metadata": {},
   "outputs": [],
   "source": [
    "del data['opfrom']\n",
    "del data['opto']\n",
    "del data['esdate']\n",
    "del data['apprdate']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "b879fabb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# tmp_df=ent_default.groupby(['ent_id','year'])['ent_id_year'].agg({'count'}).reset_index().sort_values(by='ent_id')\n",
    "# tmp_df.columns=['ent_id','year','ent_default_last_year_cnts']\n",
    "# tmp_df['year']=tmp_df['year']+1\n",
    "# data=data.merge(tmp_df,on=['ent_id','year'],how='left')\n",
    "# data['ent_default_last_year_cnts']=data['ent_default_last_year_cnts'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "231914b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# tmp_df=ent_info.groupby(['ent_id'])['ent_id'].agg({'count'}).reset_index().sort_values(by='count')\n",
    "# tmp_df.columns=['ent_id','ent_info_cnts']\n",
    "# data=data.merge(tmp_df,on=['ent_id'],how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "e0c7b179",
   "metadata": {},
   "outputs": [],
   "source": [
    "# tmp_df=ent_fina.groupby(['ent_id_year'])['ent_id_year'].agg({'count'}).reset_index().sort_values('count')\n",
    "# tmp_df.columns=['ent_id_year','ent_fina_last_year_cnts']\n",
    "# data=data.merge(tmp_df,on=['ent_id_year'],how='left')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "c3db52df",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████| 162/162 [02:59<00:00,  1.11s/it]\n"
     ]
    }
   ],
   "source": [
    "# for col in tqdm(ent_fina_num_cols):\n",
    "#     tmp_df=ent_fina.groupby(['ent_id_year'])[col].agg({'min','max',np.ptp}).reset_index()\n",
    "#     tmp_df.columns=['ent_id_year']+[col +'_'+ f for f in tmp_df.columns][1:]\n",
    "#     data=data.merge(tmp_df,on=['ent_id_year'],how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "d3d11bae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ent_id</th>\n",
       "      <th>ent_id_year</th>\n",
       "      <th>year</th>\n",
       "      <th>default_score</th>\n",
       "      <th>industryphy</th>\n",
       "      <th>industryco</th>\n",
       "      <th>regcap</th>\n",
       "      <th>enttype</th>\n",
       "      <th>entstatus</th>\n",
       "      <th>prov</th>\n",
       "      <th>...</th>\n",
       "      <th>s_qfa_yoynetprofit_ptp</th>\n",
       "      <th>s_qfa_cgrnetprofit_max</th>\n",
       "      <th>s_qfa_cgrnetprofit_min</th>\n",
       "      <th>s_qfa_cgrnetprofit_ptp</th>\n",
       "      <th>s_fa_yoy_equity_max</th>\n",
       "      <th>s_fa_yoy_equity_min</th>\n",
       "      <th>s_fa_yoy_equity_ptp</th>\n",
       "      <th>rd_expense_max</th>\n",
       "      <th>rd_expense_min</th>\n",
       "      <th>rd_expense_ptp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306</td>\n",
       "      <td>q00350f4fa8694d82639aec1653cf0306_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>117</td>\n",
       "      <td>0.000144</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>64.1702</td>\n",
       "      <td>37.4843</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>37.4843</td>\n",
       "      <td>4.4648</td>\n",
       "      <td>-55.7344</td>\n",
       "      <td>60.1992</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>q005d1b175fed3b08e45aa7a402ac0072</td>\n",
       "      <td>q005d1b175fed3b08e45aa7a402ac0072_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>277</td>\n",
       "      <td>0.002378</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>712.7701</td>\n",
       "      <td>149.4381</td>\n",
       "      <td>-245.5373</td>\n",
       "      <td>394.9754</td>\n",
       "      <td>51.1186</td>\n",
       "      <td>-40.8727</td>\n",
       "      <td>91.9913</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>q01e01a62678f34dacfaa178d8866b7b0</td>\n",
       "      <td>q01e01a62678f34dacfaa178d8866b7b0_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>102</td>\n",
       "      <td>0.000355</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>...</td>\n",
       "      <td>7313.1787</td>\n",
       "      <td>63.4901</td>\n",
       "      <td>-21436.0190</td>\n",
       "      <td>21499.5091</td>\n",
       "      <td>3.5037</td>\n",
       "      <td>-136.3506</td>\n",
       "      <td>139.8543</td>\n",
       "      <td>396497.77</td>\n",
       "      <td>0.0</td>\n",
       "      <td>396497.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>q0485d846345eabfa7e3fa4455c9e7a70</td>\n",
       "      <td>q0485d846345eabfa7e3fa4455c9e7a70_2018</td>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>244</td>\n",
       "      <td>0.000213</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>q04c0c103124d53d281131049f323b302</td>\n",
       "      <td>q04c0c103124d53d281131049f323b302_2019</td>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>0.001572</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>707.5124</td>\n",
       "      <td>145.2845</td>\n",
       "      <td>-1068.8059</td>\n",
       "      <td>1214.0904</td>\n",
       "      <td>2837.6078</td>\n",
       "      <td>-227.4925</td>\n",
       "      <td>3065.1003</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 936 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              ent_id                             ent_id_year  \\\n",
       "0  q00350f4fa8694d82639aec1653cf0306  q00350f4fa8694d82639aec1653cf0306_2018   \n",
       "1  q005d1b175fed3b08e45aa7a402ac0072  q005d1b175fed3b08e45aa7a402ac0072_2018   \n",
       "2  q01e01a62678f34dacfaa178d8866b7b0  q01e01a62678f34dacfaa178d8866b7b0_2018   \n",
       "3  q0485d846345eabfa7e3fa4455c9e7a70  q0485d846345eabfa7e3fa4455c9e7a70_2018   \n",
       "4  q04c0c103124d53d281131049f323b302  q04c0c103124d53d281131049f323b302_2019   \n",
       "\n",
       "   year  default_score  industryphy  industryco    regcap  enttype  entstatus  \\\n",
       "0  2019              1           10         117  0.000144       33          1   \n",
       "1  2019              1           17         277  0.002378        2          1   \n",
       "2  2019              1           11         102  0.000355        6          1   \n",
       "3  2019              1            5         244  0.000213       48          1   \n",
       "4  2020              1            4          82  0.001572       23          1   \n",
       "\n",
       "   prov  ...  s_qfa_yoynetprofit_ptp  s_qfa_cgrnetprofit_max  \\\n",
       "0     8  ...                 64.1702                 37.4843   \n",
       "1    20  ...                712.7701                149.4381   \n",
       "2    31  ...               7313.1787                 63.4901   \n",
       "3     1  ...                     NaN                     NaN   \n",
       "4     4  ...                707.5124                145.2845   \n",
       "\n",
       "   s_qfa_cgrnetprofit_min  s_qfa_cgrnetprofit_ptp  s_fa_yoy_equity_max  \\\n",
       "0                  0.0000                 37.4843               4.4648   \n",
       "1               -245.5373                394.9754              51.1186   \n",
       "2             -21436.0190              21499.5091               3.5037   \n",
       "3                     NaN                     NaN                  NaN   \n",
       "4              -1068.8059               1214.0904            2837.6078   \n",
       "\n",
       "   s_fa_yoy_equity_min  s_fa_yoy_equity_ptp  rd_expense_max  rd_expense_min  \\\n",
       "0             -55.7344              60.1992            0.00             0.0   \n",
       "1             -40.8727              91.9913            0.00             0.0   \n",
       "2            -136.3506             139.8543       396497.77             0.0   \n",
       "3                  NaN                  NaN             NaN             NaN   \n",
       "4            -227.4925            3065.1003            0.00             0.0   \n",
       "\n",
       "   rd_expense_ptp  \n",
       "0            0.00  \n",
       "1            0.00  \n",
       "2       396497.77  \n",
       "3             NaN  \n",
       "4            0.00  \n",
       "\n",
       "[5 rows x 936 columns]"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "e99e15d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [f for f in data.columns if f not in ['ent_id','ent_id_year','default_score']]\n",
    "train = data[data.year!=2021].reset_index(drop=True)\n",
    "test = data[data.year==2021].reset_index(drop=True)\n",
    "x_train = train[features]\n",
    "x_test = test[features]\n",
    "\n",
    "y_train = train['default_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "a7e1cd98",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_model(clf, train_x, train_y, test_x, clf_name):\n",
    "    folds = 5\n",
    "    seed = 2022\n",
    "    kf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=seed)\n",
    "\n",
    "    train = np.zeros(train_x.shape[0])\n",
    "    test = np.zeros(test_x.shape[0])\n",
    "\n",
    "    cv_scores = []\n",
    "\n",
    "    for i, (train_index, valid_index) in enumerate(kf.split(train_x, train_y)):\n",
    "        print('************************************ {} ************************************'.format(str(i+1)))\n",
    "        trn_x, trn_y, val_x, val_y = train_x.iloc[train_index], train_y[train_index], train_x.iloc[valid_index], train_y[valid_index]\n",
    "\n",
    "        if clf_name == \"lgb\":\n",
    "            train_matrix = clf.Dataset(trn_x, label=trn_y)\n",
    "            valid_matrix = clf.Dataset(val_x, label=val_y)\n",
    "\n",
    "            params = {\n",
    "                'boosting_type': 'gbdt',\n",
    "                'objective': 'binary',\n",
    "                'metric': 'auc',\n",
    "                'min_child_weight': 5,\n",
    "                'num_leaves': 2 ** 5,\n",
    "                'lambda_l2': 10,\n",
    "                'feature_fraction': 0.8,\n",
    "                'bagging_fraction': 0.8,\n",
    "                'bagging_freq': 4,\n",
    "                'learning_rate': 0.01,\n",
    "                'seed': 2022,\n",
    "                'n_jobs':-1,\n",
    "                'verbose': -1,\n",
    "            }\n",
    "            model = clf.train(params, train_matrix, 50000, valid_sets=[train_matrix, valid_matrix], \n",
    "                              categorical_feature=[], verbose_eval=500, early_stopping_rounds=500)\n",
    "            val_pred = model.predict(val_x, num_iteration=model.best_iteration)\n",
    "            test_pred = model.predict(test_x, num_iteration=model.best_iteration)\n",
    "            \n",
    "            # print(list(sorted(zip(features, model.feature_importance(\"gain\")), key=lambda x: x[1], reverse=True))[:20])\n",
    "        if clf_name == \"xgb\" :\n",
    "            train_matrix = clf.DMatrix(trn_x, label=trn_y)\n",
    "            valid_matrix = clf.DMatrix(val_x, label=val_y)\n",
    "            test_matrix = clf.DMatrix(test_x)\n",
    "            params = {\n",
    "                'booster': 'gbtree',\n",
    "                'objective': 'binary:logistic',\n",
    "                'eval_metric': 'auc',\n",
    "                'gamma': 1,\n",
    "                'min_child_weight': 1.5,\n",
    "                'max_depth': 5,\n",
    "                'lambda': 10,\n",
    "                'subsample': 0.7,\n",
    "                'colsample_bytree': 0.7,\n",
    "                'colsample_bylevel': 0.7,\n",
    "                'eta': 0.04,\n",
    "                'tree_method': 'exact',\n",
    "                'seed': 2020,\n",
    "                'n_jobs': -1,\n",
    "                \"silent\": True,\n",
    "            }\n",
    "            watchlist = [(train_matrix, 'train'),(valid_matrix, 'eval')]\n",
    "            model = clf.train(params, train_matrix, 50000,evals=watchlist , \n",
    "                              verbose_eval=500, early_stopping_rounds=500)\n",
    "            val_pred = model.predict(valid_matrix, ntree_limit=model.best_ntree_limit)\n",
    "            test_pred = model.predict(test_matrix, ntree_limit=model.best_ntree_limit)\n",
    "        if clf_name == \"cab\" :\n",
    "            params = {\n",
    "                'learning_rate':0.01,\n",
    "                'l2_leaf_reg':10,\n",
    "                'od_type':'Iter',\n",
    "                'od_wait':50,\n",
    "                'bootstrap_type':'Bayesian',\n",
    "                'random_seed':11,\n",
    "                'depth':5,\n",
    "                'random_seed':11,\n",
    "                \n",
    "            }\n",
    "            model = clf(iterations=20000,**params)\n",
    "            model.fit(trn_x , trn_y , eval_set = (val_x,val_y),\n",
    "                     cat_features=[],use_best_model=True,verbose=500)        \n",
    "            val_pred = model.predict(val_x)\n",
    "            test_pred = model.predict(test_x)\n",
    "           \n",
    "        \n",
    "        train[valid_index] = val_pred\n",
    "        test += test_pred / kf.n_splits\n",
    "        cv_scores.append(roc_auc_score(val_y, val_pred))\n",
    "        \n",
    "        print(cv_scores)\n",
    "       \n",
    "    print(\"%s_scotrainre_list:\" % clf_name, cv_scores)\n",
    "    print(\"%s_score_mean:\" % clf_name, np.mean(cv_scores))\n",
    "    print(\"%s_score_std:\" % clf_name, np.std(cv_scores))\n",
    "    return train, test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "6fb5db65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "************************************ 1 ************************************\n",
      "Training until validation scores don't improve for 500 rounds\n",
      "[500]\ttraining's auc: 0.993982\tvalid_1's auc: 0.988127\n",
      "Early stopping, best iteration is:\n",
      "[192]\ttraining's auc: 0.981067\tvalid_1's auc: 0.989069\n",
      "[0.9890692072231982]\n",
      "************************************ 2 ************************************\n",
      "Training until validation scores don't improve for 500 rounds\n",
      "[500]\ttraining's auc: 0.994594\tvalid_1's auc: 0.931949\n",
      "[1000]\ttraining's auc: 0.998404\tvalid_1's auc: 0.938806\n",
      "[1500]\ttraining's auc: 0.999341\tvalid_1's auc: 0.939901\n",
      "[2000]\ttraining's auc: 0.999679\tvalid_1's auc: 0.940762\n",
      "Early stopping, best iteration is:\n",
      "[1748]\ttraining's auc: 0.99955\tvalid_1's auc: 0.941604\n",
      "[0.9890692072231982, 0.9416035176349519]\n",
      "************************************ 3 ************************************\n",
      "Training until validation scores don't improve for 500 rounds\n",
      "[500]\ttraining's auc: 0.994695\tvalid_1's auc: 0.948311\n",
      "Early stopping, best iteration is:\n",
      "[477]\ttraining's auc: 0.99429\tvalid_1's auc: 0.948517\n",
      "[0.9890692072231982, 0.9416035176349519, 0.9485171671812143]\n",
      "************************************ 4 ************************************\n",
      "Training until validation scores don't improve for 500 rounds\n",
      "[500]\ttraining's auc: 0.994636\tvalid_1's auc: 0.937554\n",
      "[1000]\ttraining's auc: 0.998877\tvalid_1's auc: 0.947745\n",
      "[1500]\ttraining's auc: 0.999774\tvalid_1's auc: 0.956279\n",
      "[2000]\ttraining's auc: 0.999971\tvalid_1's auc: 0.960004\n",
      "[2500]\ttraining's auc: 0.999995\tvalid_1's auc: 0.962053\n",
      "[3000]\ttraining's auc: 1\tvalid_1's auc: 0.963054\n",
      "[3500]\ttraining's auc: 1\tvalid_1's auc: 0.963869\n",
      "Early stopping, best iteration is:\n",
      "[3496]\ttraining's auc: 1\tvalid_1's auc: 0.963915\n",
      "[0.9890692072231982, 0.9416035176349519, 0.9485171671812143, 0.9639154033314618]\n",
      "************************************ 5 ************************************\n",
      "Training until validation scores don't improve for 500 rounds\n",
      "[500]\ttraining's auc: 0.994486\tvalid_1's auc: 0.954146\n",
      "Early stopping, best iteration is:\n",
      "[228]\ttraining's auc: 0.984393\tvalid_1's auc: 0.960883\n",
      "[0.9890692072231982, 0.9416035176349519, 0.9485171671812143, 0.9639154033314618, 0.9608833988396033]\n",
      "lgb_scotrainre_list: [0.9890692072231982, 0.9416035176349519, 0.9485171671812143, 0.9639154033314618, 0.9608833988396033]\n",
      "lgb_score_mean: 0.9607977388420859\n",
      "lgb_score_std: 0.016298672718929735\n"
     ]
    }
   ],
   "source": [
    "def lgb_model(x_train, y_train, x_test):\n",
    "    lgb_train, lgb_test = cv_model(lgb, x_train, y_train, x_test, \"lgb\")\n",
    "    return lgb_train, lgb_test\n",
    "    \n",
    "lgb_train, lgb_test = lgb_model(x_train, y_train, x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "1c47010f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "************************************ 1 ************************************\n",
      "[20:57:39] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-auc:0.72793\teval-auc:0.75714\n",
      "[500]\ttrain-auc:0.99963\teval-auc:0.98138\n",
      "[677]\ttrain-auc:0.99972\teval-auc:0.98153\n",
      "[0.9859719983336654]\n",
      "************************************ 2 ************************************\n",
      "[20:58:23] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-auc:0.74237\teval-auc:0.71474\n",
      "[500]\ttrain-auc:0.99956\teval-auc:0.94243\n",
      "[861]\ttrain-auc:0.99969\teval-auc:0.94253\n",
      "[0.9859719983336654, 0.944017213958275]\n",
      "************************************ 3 ************************************\n",
      "[20:59:17] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-auc:0.77521\teval-auc:0.64799\n",
      "[500]\ttrain-auc:0.99968\teval-auc:0.94560\n",
      "[795]\ttrain-auc:0.99979\teval-auc:0.94407\n",
      "[0.9859719983336654, 0.944017213958275, 0.949602394985499]\n",
      "************************************ 4 ************************************\n",
      "[21:00:07] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-auc:0.75098\teval-auc:0.68112\n",
      "[500]\ttrain-auc:0.99996\teval-auc:0.95853\n",
      "[1000]\ttrain-auc:0.99999\teval-auc:0.96363\n",
      "[1500]\ttrain-auc:0.99999\teval-auc:0.96470\n",
      "[1984]\ttrain-auc:0.99999\teval-auc:0.96426\n",
      "[0.9859719983336654, 0.944017213958275, 0.949602394985499, 0.9647857009170878]\n",
      "************************************ 5 ************************************\n",
      "[21:02:04] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-auc:0.76287\teval-auc:0.78052\n",
      "[500]\ttrain-auc:0.99947\teval-auc:0.93333\n",
      "[572]\ttrain-auc:0.99951\teval-auc:0.93230\n",
      "[0.9859719983336654, 0.944017213958275, 0.949602394985499, 0.9647857009170878, 0.9526296088339885]\n",
      "xgb_scotrainre_list: [0.9859719983336654, 0.944017213958275, 0.949602394985499, 0.9647857009170878, 0.9526296088339885]\n",
      "xgb_score_mean: 0.9594013834057031\n",
      "xgb_score_std: 0.014923392558061683\n"
     ]
    }
   ],
   "source": [
    "def xgb_model(x_train, y_train, x_test):\n",
    "    xgb_train, xgb_test = cv_model(xgb, x_train, y_train, x_test, \"xgb\")\n",
    "    return xgb_train, xgb_test\n",
    "    \n",
    "xgb_train, xgb_test = xgb_model(x_train, y_train, x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "879b8aec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "************************************ 1 ************************************\n",
      "0:\tlearn: 0.0908338\ttest: 0.0922991\tbest: 0.0922991 (0)\ttotal: 23.1ms\tremaining: 7m 42s\n",
      "500:\tlearn: 0.0662601\ttest: 0.0718288\tbest: 0.0718288 (500)\ttotal: 9.2s\tremaining: 5m 58s\n",
      "1000:\tlearn: 0.0617766\ttest: 0.0703632\tbest: 0.0703602 (996)\ttotal: 18.4s\tremaining: 5m 49s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.06993833824\n",
      "bestIteration = 1434\n",
      "\n",
      "Shrink model to first 1435 iterations.\n",
      "[0.9884443317454856]\n",
      "************************************ 2 ************************************\n",
      "0:\tlearn: 0.0912350\ttest: 0.0908550\tbest: 0.0908550 (0)\ttotal: 21ms\tremaining: 7m\n",
      "500:\tlearn: 0.0650914\ttest: 0.0740707\tbest: 0.0740682 (499)\ttotal: 8.96s\tremaining: 5m 48s\n",
      "1000:\tlearn: 0.0608528\ttest: 0.0731441\tbest: 0.0731420 (996)\ttotal: 17.8s\tremaining: 5m 37s\n",
      "1500:\tlearn: 0.0578976\ttest: 0.0727458\tbest: 0.0727386 (1495)\ttotal: 26.5s\tremaining: 5m 27s\n",
      "2000:\tlearn: 0.0554065\ttest: 0.0724403\tbest: 0.0724402 (1999)\ttotal: 35.4s\tremaining: 5m 18s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.07234286895\n",
      "bestIteration = 2264\n",
      "\n",
      "Shrink model to first 2265 iterations.\n",
      "[0.9884443317454856, 0.9336514173449341]\n",
      "************************************ 3 ************************************\n",
      "0:\tlearn: 0.0911826\ttest: 0.0908778\tbest: 0.0908778 (0)\ttotal: 21.7ms\tremaining: 7m 14s\n",
      "500:\tlearn: 0.0637738\ttest: 0.0780190\tbest: 0.0780190 (500)\ttotal: 8.99s\tremaining: 5m 50s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.07749619225\n",
      "bestIteration = 944\n",
      "\n",
      "Shrink model to first 945 iterations.\n",
      "[0.9884443317454856, 0.9336514173449341, 0.9417344934044345]\n",
      "************************************ 4 ************************************\n",
      "0:\tlearn: 0.0912180\ttest: 0.0909210\tbest: 0.0909210 (0)\ttotal: 19.8ms\tremaining: 6m 36s\n",
      "500:\tlearn: 0.0644360\ttest: 0.0782626\tbest: 0.0782626 (500)\ttotal: 8.99s\tremaining: 5m 49s\n",
      "1000:\tlearn: 0.0603451\ttest: 0.0775723\tbest: 0.0775678 (998)\ttotal: 17.8s\tremaining: 5m 38s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.07756184289\n",
      "bestIteration = 1007\n",
      "\n",
      "Shrink model to first 1008 iterations.\n",
      "[0.9884443317454856, 0.9336514173449341, 0.9417344934044345, 0.9528074115665357]\n",
      "************************************ 5 ************************************\n",
      "0:\tlearn: 0.0911911\ttest: 0.0908473\tbest: 0.0908473 (0)\ttotal: 21ms\tremaining: 6m 59s\n",
      "500:\tlearn: 0.0648737\ttest: 0.0717376\tbest: 0.0717309 (489)\ttotal: 9.01s\tremaining: 5m 50s\n",
      "1000:\tlearn: 0.0602084\ttest: 0.0708782\tbest: 0.0708708 (998)\ttotal: 17.9s\tremaining: 5m 39s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.07074540046\n",
      "bestIteration = 1210\n",
      "\n",
      "Shrink model to first 1211 iterations.\n",
      "[0.9884443317454856, 0.9336514173449341, 0.9417344934044345, 0.9528074115665357, 0.9321822945910538]\n",
      "cab_scotrainre_list: [0.9884443317454856, 0.9336514173449341, 0.9417344934044345, 0.9528074115665357, 0.9321822945910538]\n",
      "cab_score_mean: 0.9497639897304888\n",
      "cab_score_std: 0.02068156221843576\n"
     ]
    }
   ],
   "source": [
    "def cab_model(x_train, y_train, x_test):\n",
    "    cab_train, cab_test = cv_model(CatBoostRegressor, x_train, y_train, x_test, \"cab\")\n",
    "    return cab_train, cab_test\n",
    "    \n",
    "cab_train, cab_test = cab_model(x_train, y_train, x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "274828f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['default_score'] = (lgb_test + xgb_test + cab_test)/3\n",
    "answer = pd.merge(answer[['ent_id']], test[['ent_id','default_score']], on=['ent_id'], how='left')\n",
    "answer[['ent_id', 'default_score']].to_csv('5_3_3.csv', header=True, index=False, sep='|')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a376a87f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "sohu",
   "language": "python",
   "name": "sohu"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
